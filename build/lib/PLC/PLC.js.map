{
  "version": 3,
  "sources": ["../../../src/lib/PLC/PLC.ts"],
  "sourcesContent": ["import { AdapterInstance } from '@iobroker/adapter-core';\nimport { AdsClient, AdsClientConnectOptions, AdsReadDeviceInfoResult, connect } from 'node-ads';\n\nexport class PLC {\n    private _adapter: Pick<AdapterInstance, 'log' | 'setState'>;\n    private _adsClientConnectOptions: AdsClientConnectOptions;\n    private _reconnectInterval: number;\n\n    private _adsClient: AdsClient;\n    private _checkDeviceStateInterval: NodeJS.Timer | null = null;\n    private _reconnectTimer: NodeJS.Timeout | null = null;\n\n    public connected = false;\n    public deviceInfo: AdsReadDeviceInfoResult | null = null;\n\n    constructor(adapter: AdapterInstance, adsClientConnectOptions: AdsClientConnectOptions, reconnectInterval: number) {\n        this._adapter = { log: adapter.log, setState: adapter.setState };\n        this._adsClientConnectOptions = adsClientConnectOptions;\n        this._reconnectInterval = reconnectInterval;\n\n        // this._adapter.setState('info.connection', this.connected, true);\n\n        this._adapter.log.info(`Connecting to \"${this._adsClientConnectOptions.host}\"`);\n\n        this._adsClient = connect(\n            {\n                verbose: this._adapter.log.level === 'debug' ? 1 : this._adapter.log.level === 'silly' ? 2 : 0,\n                ...this._adsClientConnectOptions,\n            },\n            () => this._onConnected(),\n        );\n\n        this._adsClient.on('timeout', (error) => {\n            if (this._reconnectTimer) {\n                clearTimeout(this._reconnectTimer);\n                this._reconnectTimer = null;\n            }\n\n            this._adapter.log.error(`Timeout occured in AdsClient: ${error}`);\n\n            this._onDisconnecting();\n        });\n\n        this._adsClient.on('error', (error) => {\n            if (this._reconnectTimer) {\n                clearTimeout(this._reconnectTimer);\n                this._reconnectTimer = null;\n            }\n\n            this._adapter.log.error(`Error ocurred in AdsClient: ${error}`);\n\n            this._onDisconnecting();\n        });\n    }\n\n    private _onConnected(): void {\n        this.connected = true;\n        // this._adapter.setState('info.connection', this.connected, true);\n\n        this._adapter.log.info(`Connection to \"${this._adsClientConnectOptions.host}\" established`);\n\n        const readDeviceInfo = (): void => {\n            this._adsClient.readDeviceInfo((error, result) => {\n                if (error) {\n                    this._adapter.log.error(`Error on check Device state occurred: ${error}`);\n\n                    this._onDisconnecting();\n                }\n\n                if (result) {\n                    this._adapter.log.debug(`Received new device Info: ${JSON.stringify(result)}`);\n\n                    this.deviceInfo = result;\n                }\n            });\n        };\n\n        readDeviceInfo();\n\n        this._checkDeviceStateInterval = setInterval(readDeviceInfo, 5000);\n    }\n\n    private _onDisconnecting(): void {\n        this._adapter.log.info(`Disconnect from \"${this._adsClientConnectOptions.host}\"`);\n        if (this._checkDeviceStateInterval) {\n            clearInterval(this._checkDeviceStateInterval);\n\n            this._checkDeviceStateInterval = null;\n        }\n\n        this.connected = false;\n        // this._adapter.setState('info.connection', this.connected, true);\n        this.deviceInfo = null;\n\n        this._adsClient.end(() => {\n            this._adapter.log.debug(\n                `Disconnect from \"${this._adsClientConnectOptions.host}\" done, start reconnect timer`,\n            );\n            this._reconnect();\n        });\n    }\n\n    private _reconnect(): void {\n        if (!this._reconnectTimer && !this.connected) {\n            this._reconnectTimer = setTimeout(() => {\n                if (!this.connected) {\n                    this._adapter.log.info(`Connecting to \"${this._adsClientConnectOptions.host}\"`);\n                    this._adsClient.connect(() => {\n                        if (this._reconnectTimer) {\n                            clearTimeout(this._reconnectTimer);\n                            this._reconnectTimer = null;\n                        }\n\n                        this._onConnected();\n                    });\n                }\n            }, this._reconnectInterval * 1000);\n        }\n    }\n\n    public closeConnection(): Promise<void> {\n        return new Promise((resolve, reject) => {\n            const timeout = setTimeout(() => {\n                this._adapter.log.error('Timeout closing AdsClient connection');\n                reject();\n            }, 2000);\n\n            this._adapter.log.info('Close AdsClient connection');\n            if (this._checkDeviceStateInterval) {\n                clearInterval(this._checkDeviceStateInterval);\n                this._checkDeviceStateInterval = null;\n            }\n\n            if (this._reconnectTimer) {\n                clearTimeout(this._reconnectTimer);\n                this._reconnectTimer = null;\n            }\n\n            if (this._adsClient) {\n                this._adsClient.end(() => {\n                    clearTimeout(timeout);\n                    this._adapter.log.info('Close AdsClient connection done');\n                    resolve();\n                });\n            }\n        });\n    }\n}\n"],
  "mappings": "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",
  "names": []
}

{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["/*\n * Created with @iobroker/create-adapter v2.2.1\n */\n\n// The adapter-core module gives you access to the core ioBroker functions\n// you need to create an adapter\nimport * as utils from '@iobroker/adapter-core';\nimport { PLC } from './lib/PLC';\n\n// Load your modules here, e.g.:\n// import * as fs from \"fs\";\n\nclass Beckhoff extends utils.Adapter {\n    private _plc: PLC | null = null;\n\n    public constructor(options: Partial<utils.AdapterOptions> = {}) {\n        super({\n            ...options,\n            name: 'beckhoff',\n        });\n        this.on('ready', this.onReady.bind(this));\n        this.on('stateChange', this.onStateChange.bind(this));\n        // this.on('objectChange', this.onObjectChange.bind(this));\n        // this.on('message', this.onMessage.bind(this));\n        this.on('unload', this.onUnload.bind(this));\n    }\n\n    /**\n     * Is called when databases are connected and adapter received configuration.\n     */\n    private async onReady(): Promise<void> {\n        // Initialize your adapter here\n        this._plc = new PLC(\n            this,\n            {\n                host: this.config.targetHost,\n                port: this.config.targetTcpPort,\n                amsNetIdTarget: this.config.targetAmsNetId,\n                amsPortTarget: this.config.targetAmsPort,\n                amsNetIdSource: this.config.sourceAmsNetId,\n                amsPortSource: this.config.sourceAmsPort,\n                timeout: this.config.timeout,\n            },\n            this.config.reconnectInterval,\n        );\n        /*\n\t\tFor every state in the system there has to be also an object of type state\n\t\tHere a simple template for a boolean variable named \"testVariable\"\n\t\tBecause every adapter instance uses its own unique namespace variable names can't collide with other adapters variables\n\t\t*/\n        // await this.setObjectNotExistsAsync('testVariable', {\n        //     type: 'state',\n        //     common: {\n        //         name: 'testVariable',\n        //         type: 'boolean',\n        //         role: 'indicator',\n        //         read: true,\n        //         write: true,\n        //     },\n        //     native: {},\n        // });\n        // In order to get state updates, you need to subscribe to them. The following line adds a subscription for our variable we have created above.\n        // this.subscribeStates('testVariable');\n        // You can also add a subscription for multiple states. The following line watches all states starting with \"lights.\"\n        // this.subscribeStates('lights.*');\n        // Or, if you really must, you can also watch all states. Don't do this if you don't need to. Otherwise this will cause a lot of unnecessary load on the system:\n        // this.subscribeStates('*');\n        /*\n\t\t\tsetState examples\n\t\t\tyou will notice that each setState will cause the stateChange event to fire (because of above subscribeStates cmd)\n\t\t*/\n        // the variable testVariable is set to true as command (ack=false)\n        // await this.setStateAsync('testVariable', true);\n        // // same thing, but the value is flagged \"ack\"\n        // // ack should be always set to true if the value is received from or acknowledged from the target system\n        // await this.setStateAsync('testVariable', { val: true, ack: true });\n        // // same thing, but the state is deleted after 30s (getState will return null afterwards)\n        // await this.setStateAsync('testVariable', { val: true, ack: true, expire: 30 });\n        // // examples for the checkPassword/checkGroup functions\n        // let result = await this.checkPasswordAsync('admin', 'iobroker');\n        // this.log.info('check user admin pw iobroker: ' + result);\n        // result = await this.checkGroupAsync('admin', 'admin');\n        // this.log.info('check group user admin group admin: ' + result);\n    }\n\n    /**\n     * Is called when adapter shuts down - callback has to be called under any circumstances!\n     */\n    private async onUnload(callback: () => void): Promise<void> {\n        try {\n            if (this._plc) {\n                await this._plc.closeConnection();\n            }\n\n            callback();\n        } catch (e) {\n            callback();\n        }\n    }\n\n    // If you need to react to object changes, uncomment the following block and the corresponding line in the constructor.\n    // You also need to subscribe to the objects with `this.subscribeObjects`, similar to `this.subscribeStates`.\n    // /**\n    //  * Is called if a subscribed object changes\n    //  */\n    // private onObjectChange(id: string, obj: ioBroker.Object | null | undefined): void {\n    //     if (obj) {\n    //         // The object was changed\n    //         this.log.info(`object ${id} changed: ${JSON.stringify(obj)}`);\n    //     } else {\n    //         // The object was deleted\n    //         this.log.info(`object ${id} deleted`);\n    //     }\n    // }\n\n    /**\n     * Is called if a subscribed state changes\n     */\n    private onStateChange(id: string, state: ioBroker.State | null | undefined): void {\n        if (state) {\n            // The state was changed\n            this.log.info(`state ${id} changed: ${state.val} (ack = ${state.ack})`);\n        } else {\n            // The state was deleted\n            this.log.info(`state ${id} deleted`);\n        }\n    }\n\n    // If you need to accept messages in your adapter, uncomment the following block and the corresponding line in the constructor.\n    // /**\n    //  * Some message was sent to this instance over message box. Used by email, pushover, text2speech, ...\n    //  * Using this method requires \"common.messagebox\" property to be set to true in io-package.json\n    //  */\n    // private onMessage(obj: ioBroker.Message): void {\n    //     if (typeof obj === 'object' && obj.message) {\n    //         if (obj.command === 'send') {\n    //             // e.g. send email or pushover or whatever\n    //             this.log.info('send command');\n\n    //             // Send response in callback if required\n    //             if (obj.callback) this.sendTo(obj.from, obj.command, 'Message received', obj.callback);\n    //         }\n    //     }\n    // }\n}\n\nif (require.main !== module) {\n    // Export the constructor in compact mode\n    module.exports = (options: Partial<utils.AdapterOptions> | undefined) => new Beckhoff(options);\n} else {\n    // otherwise start the instance directly\n    (() => new Beckhoff())();\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;AAMA,YAAuB;AACvB,iBAAoB;AAKpB,MAAM,iBAAiB,MAAM,QAAQ;AAAA,EAG1B,YAAY,UAAyC,CAAC,GAAG;AAC5D,UAAM;AAAA,MACF,GAAG;AAAA,MACH,MAAM;AAAA,IACV,CAAC;AANL,SAAQ,OAAmB;AAOvB,SAAK,GAAG,SAAS,KAAK,QAAQ,KAAK,IAAI,CAAC;AACxC,SAAK,GAAG,eAAe,KAAK,cAAc,KAAK,IAAI,CAAC;AAGpD,SAAK,GAAG,UAAU,KAAK,SAAS,KAAK,IAAI,CAAC;AAAA,EAC9C;AAAA,EAKA,MAAc,UAAyB;AAEnC,SAAK,OAAO,IAAI;AAAA,MACZ;AAAA,MACA;AAAA,QACI,MAAM,KAAK,OAAO;AAAA,QAClB,MAAM,KAAK,OAAO;AAAA,QAClB,gBAAgB,KAAK,OAAO;AAAA,QAC5B,eAAe,KAAK,OAAO;AAAA,QAC3B,gBAAgB,KAAK,OAAO;AAAA,QAC5B,eAAe,KAAK,OAAO;AAAA,QAC3B,SAAS,KAAK,OAAO;AAAA,MACzB;AAAA,MACA,KAAK,OAAO;AAAA,IAChB;AAAA,EAuCJ;AAAA,EAKA,MAAc,SAAS,UAAqC;AACxD,QAAI;AACA,UAAI,KAAK,MAAM;AACX,cAAM,KAAK,KAAK,gBAAgB;AAAA,MACpC;AAEA,eAAS;AAAA,IACb,SAAS,GAAP;AACE,eAAS;AAAA,IACb;AAAA,EACJ;AAAA,EAoBQ,cAAc,IAAY,OAAgD;AAC9E,QAAI,OAAO;AAEP,WAAK,IAAI,KAAK,SAAS,eAAe,MAAM,cAAc,MAAM,MAAM;AAAA,IAC1E,OAAO;AAEH,WAAK,IAAI,KAAK,SAAS,YAAY;AAAA,IACvC;AAAA,EACJ;AAkBJ;AAEA,IAAI,QAAQ,SAAS,QAAQ;AAEzB,SAAO,UAAU,CAAC,YAAuD,IAAI,SAAS,OAAO;AACjG,OAAO;AAEH,GAAC,MAAM,IAAI,SAAS,GAAG;AAC3B;",
  "names": []
}
